[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools", "setuptools_scm[toml]", "wheel"]


[project]
name = "pygrog"
description = "A package for MR reconstruction via implicit representation of GRAPPA kernels."
readme = "README.rst"

requires-python = ">=3.10"
dynamic = ["version"]

license = {file = "LICENSE"}
keywords = ["mri", "inversion", "compressed-sensing", "mri-recon"]


authors = [
  {name = "Matteo Cencini", email = "matteo.cencini@gmail.com" } # Optional
]

# Classifiers help users find your project by categorizing it.
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [  # Optional
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 3 - Alpha",

  # Indicate who your project is intended for
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",

  # Specify the Python versions you support here. In particular, ensure
  # that you indicate you support Python 3. These classifiers are *not*
  # checked by "pip install". See instead "python_requires" below.
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

dependencies = [
"numpy<2.0",
"scipy",
"numba",
"mri-nufft",
"torch",
"sigpy",
"deepinv",
"ipywidgets",
]


[project.optional-dependencies] # Optional
dev = ["black", "isort"]
test = ["pytest", "pytest-black", "pytest-cov", "pytest-sugar", "pytest-xdist"]
doc = ["sphinx", "pydata-sphinx-theme", "myst-nb", "matplotlib", "mrtwin", "sphinx-copybutton"]
# List URLs that are relevant to your project
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
[project.urls]  # Optional
"Homepage" = "https://github.com/INFN-MRI/pygrog"
"Bug Reports" = "https://github.com/INFN-MRI/pygrog/issues"
"Source" = "https://github.com/INFN-MRI/pygrog"

[tool.setuptools.packages.find]
where=["src"]

[tool.setuptools_scm]
write_to = "src/pygrog/_version.py"
version_scheme = "python-simplified-semver"
local_scheme="no-local-version"
fallback_version="v99-dev"

# Formatting using black.
[tool.black]

# linting using ruff.
[tool.ruff]
src = ["src", "tests"]
select = ["E", "F", "B", "Q", "D", "UP", "ANN"]
extend-exclude = [ 
"example_*.py" , 
"*_version.py", 
"test_*.py", 
"tests", 
"src/pygrog/_server",
]

ignore = [
    "ANN101", # missing type annotation for self
    "ANN102", # missing type annotation for cls in classmethod.
    "ANN204", # missing return type for __init__
    "D105", # missing docstring in magic method
    "D404", # Imperative mode is not necessary everywhere, trust me.
    "B905", # zip() without an explicit strict= parameter
    "B028", # No explicit stacklevel keyword argument found
    "F401", # Using ``try: import ... except:`` is nice.
]


[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.isort]
profile="black"

[tool.pytest.ini_options]
minversion = "6.0"
pythonpath  = ["tests"]
testpaths=["tests"]
addopts = [
    "--import-mode=importlib",
    "--cov=pulserver",
    "--cov-report=term-missing",
    "--cov-report=xml"
]

[tool.pylsp-mypy]
enabled = false
live_mode = false

[tool.mypy]
ignore_missing_imports = true
